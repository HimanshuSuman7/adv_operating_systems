sleep(1);
        kill(0, SIGCONT);
        for (int j = 0; j < N; j++)
        {
            retrive_id = wait(&status);
            printf("child pid = %d exited. exit status = %d\n", retrive_id, status / 256);
        }

for parent process
___

pid_t pid[11]={0};
    for(int i = 0; i < n; i++)
    {
        if(fork() == 0)
        {
            pid[i] = getpid();
        }
    }

    for(int i = 0; i < n; i++)
    {
        printf("%d ", pid[i]);
    }

    void create_child_proc(int N, pid_t *track_manager_pid)
{
    for (int i = 0; i < N; i++)
    {
        // calling fork, child will execute after this
        pid_t id = fork();
        if (id < 0)
        {
            // process not created
            perror("fork failed.\n");
            exit(0);
        }
        else if (id == 0)
        {
            // storing pid_t values in array
            track_manager_pid[i] = getpid();
            printf("child created, pid = %u, ppid = %u\n", getpid(), getppid());

            // using signal to pause child process
            kill(track_manager_pid[i], SIGSTOP);
            sleep(1);
        }
        sleep(1);
    }
}
____________________________________________

#define _GNU_SOURCE

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <pthread.h>
#include <sys/syscall.h>
#include <string.h>

typedef struct
{
    int       i;
    pid_t     pid;   // linux pid
    pid_t     tid;   // linux thread id
    pthread_t ptid;  // pthreads tid    
} data;

void *foo(void *args)
{
    data *p = (data *) args;

    p->pid  = getpid();
    p->tid  = syscall(SYS_gettid);
    p->ptid = pthread_self();

    return(p);
}

void spawnThreads(unsigned int numThreads)
{
    int ret;
    pthread_t *tids = malloc(sizeof(pthread_t) * numThreads);

    int i;

    for (i = 0; i < numThreads; i++)
    {
        data *dp = malloc(sizeof(data) * numThreads);
        memset(dp, '\0', sizeof(*dp));

        dp->i = i;

        ret = pthread_create(&tids[i], NULL, foo, (void *) dp);

        if ( ret != 0)
            perror("pthread create error");
    }

    for (int i = 0; i < numThreads; ++i)
    {
        data *status;

        ret = pthread_join(tids[i], (void *) &status);

        if ( ret != 0)
            perror("pthread join error");
        else
        {
            printf("thread num %d joined and reports pthreadId of %lu "
                   "process pid of %d and linux tid of %d\n",
                   status->i, status->ptid, status->pid, status->tid);

            free(status);
        }
    }

    free(tids);
}

0731-4911000

int main(int argc, char *argv[])
{
    printf("main thread reports pthreadId of............ %lu "
           "process pid of %d and linux tid of %ld\n",
           pthread_self(), getpid(), syscall(SYS_gettid));

    spawnThreads(5);

    return (0);
}